--lpm_abs CARRY_CHAIN="MANUAL" DEVICE_FAMILY="MAX 10" IGNORE_CARRY_BUFFERS="OFF" LPM_WIDTH=32 data result
--VERSION_BEGIN 24.1 cbx_cycloneii 2025:03:05:20:06:36:SC cbx_lpm_abs 2025:03:05:20:06:36:SC cbx_lpm_add_sub 2025:03:05:20:06:36:SC cbx_mgl 2025:03:05:20:07:01:SC cbx_nadder 2025:03:05:20:06:36:SC cbx_stratix 2025:03:05:20:06:36:SC cbx_stratixii 2025:03:05:20:06:36:SC cbx_util_mgl 2025:03:05:20:06:36:SC  VERSION_END


-- Copyright (C) 2025  Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Altera and sold by Altera or its authorized distributors.  Please
--  refer to the Altera Software License Subscription Agreements 
--  on the Quartus Prime software download page.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);

--synthesis_resources = lut 32 
SUBDESIGN lpm_abs_8b9
( 
	data[31..0]	:	input;
	overflow	:	output;
	result[31..0]	:	output;
) 
VARIABLE 
	cs2a[31..0] : carry_sum;
	result_tmp[31..0]	: WIRE;

BEGIN 
	cs2a[].cin = ( ((data[31..31] $ data[31..1]) & cs2a[30..0].cout), ((! data[0..0]) & data[31..31]));
	cs2a[].sin = ( ((data[31..31] $ data[31..1]) $ cs2a[30..0].cout), data[0..0]);
	overflow = (result_tmp[31..31] & data[31..31]);
	result[] = result_tmp[];
	result_tmp[] = ( cs2a[31..1].sout, data[0..0]);
END;
--VALID FILE
